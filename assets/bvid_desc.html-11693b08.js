import{_ as u,r as o,o as i,c as k,a as n,b as s,d as a,w as e,e as p}from"./app-ef6f9170.js";const r={},d=n("h1",{id:"bvid说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#bvid说明","aria-hidden":"true"},"#"),s(" bvid说明")],-1),v=n("p",null,[s("2020-03-23 B站推出了全新的稿件视频id"),n("code",null,"bvid"),s("来接替之前的"),n("code",null,"avid"),s("，其意义与之相同")],-1),b=n("p",null,"详见：",-1),m={href:"https://www.bilibili.com/read/cv5167957",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.bilibili.com/blackboard/activity-BV-PC.html",target:"_blank",rel:"noopener noreferrer"},w=p('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><h3 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h3><p>“bvid”恒为长度为 12 的字符串，前 3 个固定为“BV1”，后 9 个为 base58 计算结果（不包含数字 <code>0</code> 和大写字母 <code>I</code>、 <code>O</code> 以及小写字母 <code>l</code>）</p><h3 id="实质" tabindex="-1"><a class="header-anchor" href="#实质" aria-hidden="true">#</a> 实质</h3><p>“bvid&quot;为“avid”的base58编码，可通过算法进行相互转化</p><h3 id="avid发号方式的变化" tabindex="-1"><a class="header-anchor" href="#avid发号方式的变化" aria-hidden="true">#</a> avid发号方式的变化</h3>',6),g={href:"https://www.bilibili.com/video/av2",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.bilibili.com/video/av99999999",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("s",null,"暗示B站东方要完？泪目")],-1),x=n("h2",{id:"算法概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法概述","aria-hidden":"true"},"#"),s(" 算法概述")],-1),A={href:"https://www.zhihu.com/question/381784377/answer/1099438784",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.bilibili.com/video/BV1N741127Tj",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/SocialSisterYi/bilibili-API-collect/issues/740",target:"_blank",rel:"noopener noreferrer"},q=n("s",null,"来自 B 站某个 JS 文件？",-1),E=p('<h3 id="av-bv算法" tabindex="-1"><a class="header-anchor" href="#av-bv算法" aria-hidden="true">#</a> av-&gt;bv算法</h3><p><strong>说明</strong></p><ol><li>目前的 BV 格式为 BV1XXXXXXXXX，以 BV1 开头，后面包含 9 位有效数据。</li><li>AV 最大值为 2⁵¹。</li></ol><p><strong>算法</strong></p><ul><li>定义一个包含初始值为 <code>[&#39;B&#39;, &#39;V&#39;, &#39;1&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;]</code> 的长度为 12 的数组<code>bytes</code>，用于存储转换后的字符。 <ul><li>定义变量 <code>bv_idx</code> 并初始化为数组 <code>bytes</code> 的最后一个索引。</li><li>将输入的 <code>aid</code> 与 avid 最大值（2⁵¹）进行按位或运算，其结果与常量 <code>XOR_CODE</code>（23442827791579）进行异或运算，得到变量 <code>tmp</code>。</li><li>当 <code>tmp</code> 大于0时，循环执行以下操作直到小于0： <ul><li>将 <code>tmp</code> 除以 58（码表的长度） 的余数作为索引，从 <code>FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf</code> 码表中取出对应的字符，并将其赋值给 <code>bytes[bv_idx]</code>。</li><li>将 <code>tmp</code> 与 58 求模赋值给 <code>tmp</code>。</li><li>将 <code>bv_idx</code> 减1。</li></ul></li><li>将 <code>bytes</code> 数组中索引为 3 和 9 的元素进行交换。</li><li>将 <code>bytes</code> 数组中索引为 4 和 7 的元素进行交换。</li><li>将 <code>bytes</code> 数组转换为字符串，并返回结果。</li></ul></li></ul><h3 id="bv-av算法" tabindex="-1"><a class="header-anchor" href="#bv-av算法" aria-hidden="true">#</a> bv-&gt;av算法</h3><p>是 #av-&gt;bv算法 的逆向</p><ul><li>将 <code>bvid</code> 中索引为 3 和 9 的字符进行交换。</li><li>将 <code>bvid</code> 中索引为 4 和 7 的字符进行交换。</li><li>删除 <code>bvid</code> 前3个字符（固定为 BV1）。</li><li>定义变量 <code>tmp</code> 并初始化为 0。</li><li>遍历 <code>bvid</code> 的每个字符，执行以下操作： <ul><li>获取当前字符在 <code>FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf</code> 码表中的索引，并将其赋值给变量 <code>idx</code>。</li><li>将 <code>tmp</code> 乘以常量 58，并加上 <code>idx</code>，最后赋值给 <code>tmp</code>。</li></ul></li><li>将 <code>tmp</code> 与常量 2⁵¹ - 1 进行按位与运算，其结果与常量 <code>XOR_CODE</code>（23442827791579） 进行异或运算，得到最终结果。</li></ul><h2 id="编程实现" tabindex="-1"><a class="header-anchor" href="#编程实现" aria-hidden="true">#</a> 编程实现</h2><h3 id="javascript-typescript" tabindex="-1"><a class="header-anchor" href="#javascript-typescript" aria-hidden="true">#</a> JavaScript/TypeScript</h3>',10),D=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"XOR_CODE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"23442827791579n"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"MASK_CODE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2251799813685247n"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"MAX_AID"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1n"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"51n"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"BASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"58n"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"av2bv"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"aid"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" bytes "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'B'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'V'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'1'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" bvIndex "),n("span",{class:"token operator"},"="),s(" bytes"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" tmp "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"MAX_AID"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token function"},"BigInt"),n("span",{class:"token punctuation"},"("),s("aid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"^"),s(),n("span",{class:"token constant"},"XOR_CODE"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("tmp "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    bytes`),n("span",{class:"token punctuation"},"["),s("bvIndex"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" data"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("tmp "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token function"},"BigInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"BASE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    tmp `),n("span",{class:"token operator"},"="),s(" tmp "),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token constant"},"BASE"),n("span",{class:"token punctuation"},";"),s(`
    bvIndex `),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" bytes"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"bv2av"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"bvid"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" bvidArr "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("bvid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  bvidArr`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" tmp "),n("span",{class:"token operator"},"="),s(" bvidArr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reduce"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("pre"),n("span",{class:"token punctuation"},","),s(" bvidChar")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" pre "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token constant"},"BASE"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token function"},"BigInt"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"indexOf"),n("span",{class:"token punctuation"},"("),s("bvidChar"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("tmp "),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token constant"},"MASK_CODE"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"^"),s(),n("span",{class:"token constant"},"XOR_CODE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"av2bv"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"111298867365120"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"bv2av"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'BV1L9Uoa9EUx'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"XOR_CODE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"23442827791579n"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"MASK_CODE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2251799813685247n"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"MAX_AID"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1n"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"51n"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"BASE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"58n"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf'"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"av2bv"),n("span",{class:"token punctuation"},"("),s("aid"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" bytes "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'B'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'V'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'1'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'0'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" bvIndex "),n("span",{class:"token operator"},"="),s(" bytes"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" tmp "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"MAX_AID"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token function"},"BigInt"),n("span",{class:"token punctuation"},"("),s("aid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"^"),s(),n("span",{class:"token constant"},"XOR_CODE"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("tmp "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    bytes`),n("span",{class:"token punctuation"},"["),s("bvIndex"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" data"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("tmp "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token function"},"BigInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"BASE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    tmp `),n("span",{class:"token operator"},"="),s(" tmp "),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token constant"},"BASE"),n("span",{class:"token punctuation"},";"),s(`
    bvIndex `),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bytes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" bytes"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"BV1"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token builtin"},"string"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"bv2av"),n("span",{class:"token punctuation"},"("),s("bvid"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"BV1"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token builtin"},"string"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" bvidArr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"from"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"string"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("bvid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" bvidArr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  bvidArr`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" tmp "),n("span",{class:"token operator"},"="),s(" bvidArr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reduce"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("pre"),n("span",{class:"token punctuation"},","),s(" bvidChar"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" pre "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token constant"},"BASE"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token function"},"BigInt"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"indexOf"),n("span",{class:"token punctuation"},"("),s("bvidChar"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("tmp "),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token constant"},"MASK_CODE"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"^"),s(),n("span",{class:"token constant"},"XOR_CODE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"av2bv"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"111298867365120"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"bv2av"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'BV1L9Uoa9EUx'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("h3",{id:"python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python","aria-hidden":"true"},"#"),s(" Python")],-1),C={href:"https://github.com/SocialSisterYi/bilibili-API-collect/issues/847#issuecomment-1807020675",target:"_blank",rel:"noopener noreferrer"},V=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>XOR_CODE <span class="token operator">=</span> <span class="token number">23442827791579</span>
MASK_CODE <span class="token operator">=</span> <span class="token number">2251799813685247</span>
MAX_AID <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">51</span>
ALPHABET <span class="token operator">=</span> <span class="token string">&quot;FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf&quot;</span>
ENCODE_MAP <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span>
DECODE_MAP <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>ENCODE_MAP<span class="token punctuation">)</span><span class="token punctuation">)</span>

BASE <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ALPHABET<span class="token punctuation">)</span>
PREFIX <span class="token operator">=</span> <span class="token string">&quot;BV1&quot;</span>
PREFIX_LEN <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>PREFIX<span class="token punctuation">)</span>
CODE_LEN <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ENCODE_MAP<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">av2bv</span><span class="token punctuation">(</span>aid<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    bvid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">9</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>MAX_AID <span class="token operator">|</span> aid<span class="token punctuation">)</span> <span class="token operator">^</span> XOR_CODE
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>CODE_LEN<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bvid<span class="token punctuation">[</span>ENCODE_MAP<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> ALPHABET<span class="token punctuation">[</span>tmp <span class="token operator">%</span> BASE<span class="token punctuation">]</span>
        tmp <span class="token operator">//=</span> BASE
    <span class="token keyword">return</span> PREFIX <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>bvid<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">bv2av</span><span class="token punctuation">(</span>bvid<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> bvid<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> PREFIX

    bvid <span class="token operator">=</span> bvid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    tmp <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>CODE_LEN<span class="token punctuation">)</span><span class="token punctuation">:</span>
        idx <span class="token operator">=</span> ALPHABET<span class="token punctuation">.</span>index<span class="token punctuation">(</span>bvid<span class="token punctuation">[</span>DECODE_MAP<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> BASE <span class="token operator">+</span> idx
    <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> MASK_CODE<span class="token punctuation">)</span> <span class="token operator">^</span> XOR_CODE

<span class="token keyword">assert</span> av2bv<span class="token punctuation">(</span><span class="token number">111298867365120</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;BV1L9Uoa9EUx&quot;</span>
<span class="token keyword">assert</span> bv2av<span class="token punctuation">(</span><span class="token string">&quot;BV1L9Uoa9EUx&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">111298867365120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h3>`,2),I={href:"https://github.com/Colerar/abv/blob/main/src/lib.rs",target:"_blank",rel:"noopener noreferrer"},X=p(`<h3 id="swift" tabindex="-1"><a class="header-anchor" href="#swift" aria-hidden="true">#</a> Swift</h3><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">fileprivate</span> <span class="token keyword">let</span> <span class="token constant">XOR_CODE</span><span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">23442827791579</span>
<span class="token keyword">fileprivate</span> <span class="token keyword">let</span> <span class="token constant">MASK_CODE</span><span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">2251799813685247</span>
<span class="token keyword">fileprivate</span> <span class="token keyword">let</span> <span class="token constant">MAX_AID</span><span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">51</span>

<span class="token keyword">fileprivate</span> <span class="token keyword">let</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UInt8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span>

<span class="token keyword">fileprivate</span> <span class="token keyword">let</span> <span class="token constant">BASE</span><span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">58</span>
<span class="token keyword">fileprivate</span> <span class="token keyword">let</span> <span class="token constant">BV_LEN</span><span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">fileprivate</span> <span class="token keyword">let</span> <span class="token constant">PREFIX</span><span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;BV1&quot;</span></span>

<span class="token keyword">func</span> <span class="token function-definition function">av2bv</span><span class="token punctuation">(</span>avid<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> bytes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UInt8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> bvIdx <span class="token operator">=</span> <span class="token constant">BV_LEN</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">MAX_AID</span> <span class="token operator">|</span> avid<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token constant">XOR_CODE</span>

    <span class="token keyword">while</span> tmp <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        bytes<span class="token punctuation">[</span>bvIdx<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> <span class="token constant">BASE</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        tmp <span class="token operator">/=</span> <span class="token constant">BASE</span>
        bvIdx <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    bytes<span class="token punctuation">.</span><span class="token function">swapAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
    bytes<span class="token punctuation">.</span><span class="token function">swapAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> bytes<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function-definition function">bv2av</span><span class="token punctuation">(</span>bvid<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UInt64</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> fixedBvid<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">if</span> bvid<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;BV&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fixedBvid <span class="token operator">=</span> bvid
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        fixedBvid <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;BV&quot;</span></span> <span class="token operator">+</span> bvid
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> bvidArray <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>fixedBvid<span class="token punctuation">.</span>utf8<span class="token punctuation">)</span>

    bvidArray<span class="token punctuation">.</span><span class="token function">swapAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
    bvidArray<span class="token punctuation">.</span><span class="token function">swapAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> trimmedBvid <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> bvidArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> tmp<span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> char <span class="token keyword">in</span> trimmedBvid <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> idx <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> char<span class="token punctuation">.</span>utf8<span class="token punctuation">.</span>first<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token constant">BASE</span> <span class="token operator">+</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> <span class="token constant">MASK_CODE</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token constant">XOR_CODE</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">av2bv</span><span class="token punctuation">(</span>avid<span class="token punctuation">:</span> <span class="token number">111298867365120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">bv2av</span><span class="token punctuation">(</span>bvid<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;BV1L9Uoa9EUx&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> cctyl
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVBVConverter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BigInteger</span> <span class="token constant">XOR_CODE</span> <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">23442827791579L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BigInteger</span> <span class="token constant">MASK_CODE</span> <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2251799813685247L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BigInteger</span> <span class="token constant">MAX_AID</span> <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">.</span><span class="token function">shiftLeft</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BASE</span> <span class="token operator">=</span> <span class="token number">58</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token string">&quot;FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">av2bv</span><span class="token punctuation">(</span><span class="token keyword">long</span> aidParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigInteger</span> aid <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>aidParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> bvIndex <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> tmp <span class="token operator">=</span> <span class="token constant">MAX_AID</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>aid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xor</span><span class="token punctuation">(</span><span class="token constant">XOR_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bytes<span class="token punctuation">[</span>bvIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">BASE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">BASE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bvIndex<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">bv2av</span><span class="token punctuation">(</span><span class="token class-name">String</span> bvid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bvidArr <span class="token operator">=</span> bvid<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>bvidArr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>bvidArr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> adjustedBvid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bvidArr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> bvidArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> tmp <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> adjustedBvid<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">BASE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">BigInteger</span> xor <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token constant">MASK_CODE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xor</span><span class="token punctuation">(</span><span class="token constant">XOR_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> xor<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">final</span> <span class="token keyword">int</span> aid1 <span class="token operator">=</span> <span class="token number">643755790</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> bv1 <span class="token operator">=</span> <span class="token string">&quot;BV1bY4y1j7RA&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token keyword">int</span> aid2 <span class="token operator">=</span> <span class="token number">305988942</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> bv2 <span class="token operator">=</span> <span class="token string">&quot;BV1aP411K7it&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//av ==&gt; bv</span>
        <span class="token keyword">assert</span> <span class="token function">av2bv</span><span class="token punctuation">(</span>aid1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bv1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> <span class="token function">av2bv</span><span class="token punctuation">(</span>aid2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bv2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//bv ==&gt;av</span>
        <span class="token keyword">assert</span> <span class="token function">bv2av</span><span class="token punctuation">(</span>bv1<span class="token punctuation">)</span> <span class="token operator">==</span> aid1<span class="token punctuation">;</span>
        <span class="token keyword">assert</span> <span class="token function">bv2av</span><span class="token punctuation">(</span>bv2<span class="token punctuation">)</span> <span class="token operator">==</span> aid2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="golang" tabindex="-1"><a class="header-anchor" href="#golang" aria-hidden="true">#</a> Golang</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	XOR_CODE <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">23442827791579</span><span class="token punctuation">)</span>
	MAX_CODE <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">2251799813685247</span><span class="token punctuation">)</span>
	CHARTS   <span class="token operator">=</span> <span class="token string">&quot;FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf&quot;</span>
	PAUL_NUM <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">swapString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	chars <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	chars<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>x<span class="token punctuation">]</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Bvid2Avid</span><span class="token punctuation">(</span>bvid <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>avid <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">swapString</span><span class="token punctuation">(</span><span class="token function">swapString</span><span class="token punctuation">(</span>bvid<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
	bv1 <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	temp <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> bv1 <span class="token punctuation">{</span>
		idx <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">IndexRune</span><span class="token punctuation">(</span>CHARTS<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		temp <span class="token operator">=</span> temp<span class="token operator">*</span>PAUL_NUM <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	avid <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> MAX_CODE<span class="token punctuation">)</span> <span class="token operator">^</span> XOR_CODE
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Avid2Bvid</span><span class="token punctuation">(</span>avid <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bvid <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;V&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span>
	bvIdx <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	temp <span class="token operator">:=</span> <span class="token punctuation">(</span>avid <span class="token operator">|</span> <span class="token punctuation">(</span>MAX_CODE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> XOR_CODE
	<span class="token keyword">for</span> temp <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		idx <span class="token operator">:=</span> temp <span class="token operator">%</span> PAUL_NUM
		arr<span class="token punctuation">[</span>bvIdx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>CHARTS<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
		temp <span class="token operator">/=</span> PAUL_NUM
		bvIdx<span class="token operator">--</span>
	<span class="token punctuation">}</span>
	raw <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
	bvid <span class="token operator">=</span> <span class="token function">swapString</span><span class="token punctuation">(</span><span class="token function">swapString</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	avid <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">1054803170</span><span class="token punctuation">)</span>
	bvid <span class="token operator">:=</span> <span class="token string">&quot;BV1mH4y1u7UA&quot;</span>
	resAvid <span class="token operator">:=</span> <span class="token function">Bvid2Avid</span><span class="token punctuation">(</span>bvid<span class="token punctuation">)</span>
	resBvid <span class="token operator">:=</span> <span class="token function">Avid2Bvid</span><span class="token punctuation">(</span>avid<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;convert bvid to avid: %v\\tvalue:%v\\n&quot;</span><span class="token punctuation">,</span> avid <span class="token operator">==</span> resAvid<span class="token punctuation">,</span> resAvid<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;convert avid to bvid: %v\\tvalue:%v\\n&quot;</span><span class="token punctuation">,</span> bvid <span class="token operator">==</span> resBvid<span class="token punctuation">,</span> resBvid<span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C++</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;print&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">constexpr</span> <span class="token keyword">int64_t</span> XOR_CODE          <span class="token operator">=</span> <span class="token number">0x1552356C4CDB</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int64_t</span> MAX_AID           <span class="token operator">=</span> <span class="token number">0x8000000000000</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int64_t</span> MASK_CODE         <span class="token operator">=</span> MAX_AID <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int64_t</span> BASE              <span class="token operator">=</span> <span class="token number">58</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">char</span>    Table<span class="token punctuation">[</span>BASE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token string">&quot;FcwAPNKTMug3GV5Lj7EJnHpWsx4tb8haYeviqBz6rkCy12mUSDQX9RdoZf&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">char</span>    ReverseTable<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span>
    <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">Av2bv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int64_t</span> Avid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>Avid <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;Avid must be greater than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string bv <span class="token operator">=</span> <span class="token string">&quot;BV1&quot;</span><span class="token punctuation">;</span>
    bv<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int64_t</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Avid <span class="token operator">|</span> MAX_AID<span class="token punctuation">)</span> <span class="token operator">^</span> XOR_CODE<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> bv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> tmp <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Table<span class="token punctuation">[</span>tmp <span class="token operator">%</span> BASE<span class="token punctuation">]</span><span class="token punctuation">;</span>
        tmp <span class="token operator">/=</span> BASE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>bv<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bv<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>bv<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bv<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int64_t</span> <span class="token function">Bv2av</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>Bvid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>Bvid<span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation">(</span><span class="token string">&quot;BV1&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;Bvid must start with &#39;BV1&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">auto</span> Bvid_ <span class="token operator">=</span> Bvid<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>Bvid_<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bvid_<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>Bvid_<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bvid_<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int64_t</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Bvid_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tmp <span class="token operator">=</span> ReverseTable<span class="token punctuation">[</span>Bvid_<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> BASE <span class="token operator">*</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> MASK_CODE<span class="token punctuation">)</span> <span class="token operator">^</span> XOR_CODE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Av2bv</span><span class="token punctuation">(</span><span class="token number">1004871019</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;BV16x4y1H7M1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Bv2av</span><span class="token punctuation">(</span><span class="token string">&quot;BV16x4y1H7M1&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1004871019</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="老版算法存档" tabindex="-1"><a class="header-anchor" href="#老版算法存档" aria-hidden="true">#</a> 老版算法存档</h2><p><strong>以下算法已失效</strong>，编解码函数值域有限，不推荐使用，在此仅作为存档</p>`,10),R=n("summary",null,"查看折叠内容：",-1),M={href:"https://www.bilibili.com/video/BV1N741127Tj",target:"_blank",rel:"noopener noreferrer"},T=p(`<h3 id="av-bv算法-1" tabindex="-1"><a class="header-anchor" href="#av-bv算法-1" aria-hidden="true">#</a> av-&gt;bv算法</h3><p>注：本算法及示例程序仅能编解码<code>avid &lt; 29460791296</code>，且暂无法验证<code>avid &gt;= 29460791296</code>的正确性 再注：本人不清楚新算法能否编解码<code>avid &gt;= 29460791296</code></p><ol><li>a = (avid ⊕ 177451812) + 100618342136696320</li><li>以 i 为循环变量循环 6 次 b[i] = (a / 58 ^ i) % 58</li><li>将 b[i] 中各个数字转换为以下码表中的字符</li></ol><p>码表：</p><blockquote><p>fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF</p></blockquote><ol start="4"><li><p>初始化字符串 b[i]=<code></code></p></li><li><p>按照以下字符顺序编码表编码并填充至 b[i]</p></li></ol><p>字符顺序编码表：</p><blockquote><p>0 -&gt; 9</p><p>1 -&gt; 8</p><p>2 -&gt; 1</p><p>3 -&gt; 6</p><p>4 -&gt; 2</p><p>5 -&gt; 4</p><p>6 -&gt; 0</p><p>7 -&gt; 7</p><p>8 -&gt; 3</p><p>9 -&gt; 5</p></blockquote><h3 id="bv-av算法-1" tabindex="-1"><a class="header-anchor" href="#bv-av算法-1" aria-hidden="true">#</a> bv-&gt;av算法</h3><p>为以上算法的逆运算</p><h3 id="编程实现-1" tabindex="-1"><a class="header-anchor" href="#编程实现-1" aria-hidden="true">#</a> 编程实现</h3><p>使用 Python C TypeScript Java Kotlin Golang Rust 等语言作为示例，欢迎社区提交更多例程</p><h4 id="python-1" tabindex="-1"><a class="header-anchor" href="#python-1" aria-hidden="true">#</a> Python</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>XOR <span class="token operator">=</span> <span class="token number">177451812</span>
ADD <span class="token operator">=</span> <span class="token number">100618342136696320</span>
TABLE <span class="token operator">=</span> <span class="token string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span>
MAP <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span>


<span class="token keyword">def</span> <span class="token function">av2bv</span><span class="token punctuation">(</span>av<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    av <span class="token operator">=</span> <span class="token punctuation">(</span>av <span class="token operator">^</span> XOR<span class="token punctuation">)</span> <span class="token operator">+</span> ADD
    bv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        bv<span class="token punctuation">[</span>MAP<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> TABLE<span class="token punctuation">[</span><span class="token punctuation">(</span>av <span class="token operator">//</span> <span class="token number">58</span><span class="token operator">**</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">58</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>bv<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">bv2av</span><span class="token punctuation">(</span>bv<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    av <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span>
    s <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">+=</span> TABLE<span class="token punctuation">.</span>find<span class="token punctuation">(</span>bv<span class="token punctuation">[</span>MAP<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">58</span><span class="token operator">**</span>i
    av <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> ADD<span class="token punctuation">)</span> <span class="token operator">^</span> XOR

    <span class="token keyword">return</span> av


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
        mode <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;1. AV to BV\\n2. BV to AV\\n3. Exit\\n你的选择：&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;BV号是：BV </span><span class="token interpolation"><span class="token punctuation">{</span>av2bv<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;AV号是：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;AV号是：AV </span><span class="token interpolation"><span class="token punctuation">{</span>bv2av<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;BV号是：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入错误请重新输入&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-1" tabindex="-1"><a class="header-anchor" href="#c-1" aria-hidden="true">#</a> C</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">const</span> <span class="token keyword">char</span> table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 码表</span>
<span class="token keyword">char</span> tr<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 反查码表</span>
<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> XOR <span class="token operator">=</span> <span class="token number">177451812</span><span class="token punctuation">;</span> <span class="token comment">// 固定异或值</span>
<span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ADD <span class="token operator">=</span> <span class="token number">8728348608</span><span class="token punctuation">;</span> <span class="token comment">// 固定加法值</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 位置编码表</span>

<span class="token comment">// 初始化反查码表</span>
<span class="token keyword">void</span> <span class="token function">tr_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">58</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		tr<span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">bv2av</span><span class="token punctuation">(</span><span class="token keyword">char</span> bv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> av<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		r <span class="token operator">+=</span> tr<span class="token punctuation">[</span>bv<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	av <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> ADD<span class="token punctuation">)</span> <span class="token operator">^</span> XOR<span class="token punctuation">;</span>
	<span class="token keyword">return</span> av<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">av2bv</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> av<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token string">&quot;BV1  4 1 7  &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	av <span class="token operator">=</span> <span class="token punctuation">(</span>av <span class="token operator">^</span> XOR<span class="token punctuation">)</span> <span class="token operator">+</span> ADD<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		result<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>av <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">tr_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">av2bv</span><span class="token punctuation">(</span><span class="token number">170001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">bv2av</span><span class="token punctuation">(</span><span class="token string">&quot;BV17x411w7KC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BV17x411w7KC
170001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h4>`,19),L={href:"https://github.com/SocialSisterYi/bilibili-API-collect/issues/417#issuecomment-1186475063",target:"_blank",rel:"noopener noreferrer"},P=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">BvCode</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token constant">TABEL</span> <span class="token operator">=</span> <span class="token string">&#39;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 码表</span>
  <span class="token keyword">private</span> <span class="token constant">TR</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 反查码表</span>
  <span class="token keyword">private</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 位置编码表</span>
  <span class="token keyword">private</span> <span class="token constant">XOR</span> <span class="token operator">=</span> <span class="token number">177451812</span><span class="token punctuation">;</span> <span class="token comment">// 固定异或值</span>
  <span class="token keyword">private</span> <span class="token constant">ADD</span> <span class="token operator">=</span> <span class="token number">8728348608</span><span class="token punctuation">;</span> <span class="token comment">// 固定加法值</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化反查码表</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">TABEL</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">TR</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">TABEL</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">av2bv</span><span class="token punctuation">(</span>av<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> x_ <span class="token operator">=</span> <span class="token punctuation">(</span>av <span class="token operator">^</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">XOR</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&#39;7&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">TABEL</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x_ <span class="token operator">/</span> <span class="token number">58</span> <span class="token operator">**</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">bv2av</span><span class="token punctuation">(</span>bv<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">TR</span><span class="token punctuation">[</span>bv<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">58</span> <span class="token operator">**</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">XOR</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> bvcode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BvCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bvcode<span class="token punctuation">.</span><span class="token function">av2bv</span><span class="token punctuation">(</span><span class="token number">170001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bvcode<span class="token punctuation">.</span><span class="token function">bv2av</span><span class="token punctuation">(</span><span class="token string">&#39;BV17x411w7KC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BV17x411w7KC
170001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="java-1" tabindex="-1"><a class="header-anchor" href="#java-1" aria-hidden="true">#</a> Java</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 算法来自：https://www.zhihu.com/question/381784377/answer/1099438784
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TABLE</span> <span class="token operator">=</span> <span class="token string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">S</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">XOR</span> <span class="token operator">=</span> <span class="token number">177451812</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">ADD</span> <span class="token operator">=</span> <span class="token number">8728348608L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token constant">MAP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">58</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">aidToBvid</span><span class="token punctuation">(</span><span class="token keyword">int</span> aid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>aid <span class="token operator">^</span> <span class="token constant">XOR</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ADD</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> pow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> i1 <span class="token operator">=</span> x <span class="token operator">/</span> pow<span class="token punctuation">;</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i1 <span class="token operator">%</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            chars<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bvidToAid</span><span class="token punctuation">(</span><span class="token class-name">String</span> bvid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r <span class="token operator">+=</span> <span class="token constant">MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bvid<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token constant">ADD</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token constant">XOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kotlin" tabindex="-1"><a class="header-anchor" href="#kotlin" aria-hidden="true">#</a> Kotlin</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 此程序非完全原创，改编自GH站内某大佬的Java程序，修改了部分代码，且转换为Kotlin
 * 算法来源同上
 */</span>
<span class="token keyword">object</span> VideoUtils <span class="token punctuation">{</span>
    <span class="token comment">//这里是由知乎大佬不知道用什么方法得出的转换用数字</span>
    <span class="token keyword">var</span> ss <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> <span class="token operator">xor</span><span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">177451812</span> <span class="token comment">//二进制时加减数1</span>

    <span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token number">8728348608L</span> <span class="token comment">//十进制时加减数2</span>

    <span class="token comment">//变量初始化工作，加载哈希表</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> table <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span></span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> mp <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> mp2 <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//现在，定义av号和bv号互转的方法</span>
<span class="token comment">//定义一个power乘方方法，这是转换进制必要的</span>
    <span class="token keyword">fun</span> <span class="token function">power</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token punctuation">{</span>
        <span class="token keyword">var</span> power<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token keyword">in</span> <span class="token number">0</span> until b<span class="token punctuation">)</span> power <span class="token operator">*=</span> a<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> power
    <span class="token punctuation">}</span>

    <span class="token comment">//bv转av方法</span>
    <span class="token keyword">fun</span> <span class="token function">bv2av</span><span class="token punctuation">(</span>s<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">var</span> r<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment">//58进制转换</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">57</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> s1 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            mp<span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r <span class="token operator">+=</span> mp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!!</span> <span class="token operator">*</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//转换完成后，需要处理，带上两个随机数</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> add <span class="token operator">xor</span> <span class="token operator">xor</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//av转bv方法</span>
    <span class="token keyword">fun</span> <span class="token function">av2bv</span><span class="token punctuation">(</span>st<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> s <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;av&quot;</span></span><span class="token punctuation">.</span><span class="token function">toRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dropLastWhile</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">.</span><span class="token function">toTypedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">val</span> sb <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;BV1  4 1 7  &quot;</span></span><span class="token punctuation">)</span>
            <span class="token comment">//逆向思路，先将随机数还原</span>
            s <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">xor</span> <span class="token operator">xor</span><span class="token punctuation">)</span> <span class="token operator">+</span> add
            <span class="token comment">//58进制转回</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">57</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">val</span> s1 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                mp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s1
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">val</span> r <span class="token operator">=</span> mp2<span class="token punctuation">[</span><span class="token punctuation">(</span>s <span class="token operator">/</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
                sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">!!</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ArrayIndexOutOfBoundsException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="golang-1" tabindex="-1"><a class="header-anchor" href="#golang-1" aria-hidden="true">#</a> Golang</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;math&quot;</span>

<span class="token keyword">const</span> TABLE <span class="token operator">=</span> <span class="token string">&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span>
<span class="token keyword">var</span> S <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token builtin">uint</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> XOR <span class="token operator">=</span> <span class="token number">177451812</span>
<span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token number">8728348608</span>

<span class="token keyword">var</span> TR <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 初始化 TR</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">58</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		TR<span class="token punctuation">[</span>TABLE<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BV2AV</span><span class="token punctuation">(</span>bv <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		r <span class="token operator">+=</span> TR<span class="token punctuation">[</span>bv<span class="token punctuation">[</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> ADD<span class="token punctuation">)</span> <span class="token operator">^</span> XOR
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">AV2BV</span><span class="token punctuation">(</span>av <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	x <span class="token operator">:=</span> <span class="token punctuation">(</span>av <span class="token operator">^</span> XOR<span class="token punctuation">)</span> <span class="token operator">+</span> ADD
	r <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span><span class="token string">&quot;BV1  4 1 7  &quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		r<span class="token punctuation">[</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rune</span><span class="token punctuation">(</span>TABLE<span class="token punctuation">[</span>x<span class="token operator">/</span><span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">58</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">AV2BV</span><span class="token punctuation">(</span><span class="token number">170001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">BV2AV</span><span class="token punctuation">(</span><span class="token string">&quot;BV17x411w7KC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BV17x411w7KC
170001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rust-1" tabindex="-1"><a class="header-anchor" href="#rust-1" aria-hidden="true">#</a> Rust</h4><p>crate: https://github.com/stackinspector/bvid</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// Copyright (c) 2023 stackinspector. MIT license.</span>

<span class="token keyword">const</span> <span class="token constant">XORN</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">177451812</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">ADDN</span><span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">100618342136696320</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">TABLE</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">58</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token string">b&quot;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">MAP</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">usize</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">REV_TABLE</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">74</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">POW58</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u64</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">3364</span><span class="token punctuation">,</span> <span class="token number">195112</span><span class="token punctuation">,</span> <span class="token number">11316496</span><span class="token punctuation">,</span> <span class="token number">656356768</span><span class="token punctuation">,</span> <span class="token number">38068692544</span><span class="token punctuation">,</span>
    <span class="token number">2207984167552</span><span class="token punctuation">,</span> <span class="token number">128063081718016</span><span class="token punctuation">,</span> <span class="token number">7427658739644928</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">av2bv</span><span class="token punctuation">(</span>avid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>avid <span class="token operator">^</span> <span class="token constant">XORN</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ADDN</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> bvid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>
        bvid<span class="token punctuation">[</span><span class="token constant">MAP</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">TABLE</span><span class="token punctuation">[</span><span class="token punctuation">(</span>a <span class="token operator">/</span> <span class="token constant">POW58</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">%</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bvid
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">bv2av</span><span class="token punctuation">(</span>bvid<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u64</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>
        a <span class="token operator">+=</span> <span class="token constant">REV_TABLE</span><span class="token punctuation">[</span>bvid<span class="token punctuation">[</span><span class="token constant">MAP</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">-</span> <span class="token number">49</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">u64</span> <span class="token operator">*</span> <span class="token constant">POW58</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token constant">ADDN</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token constant">XORN</span>
<span class="token punctuation">}</span>

<span class="token comment">// assert_eq!(*b&quot;17x411w7KC&quot;, av2bv(170001));</span>
<span class="token comment">// assert_eq!(170001, bv2av(*b&quot;17x411w7KC&quot;));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function U(j,N){const t=o("ExternalLinkIcon"),c=o("CodeGroupItem"),l=o("CodeGroup");return i(),k("div",null,[d,v,b,n("ol",null,[n("li",null,[n("a",m,[s("【升级公告】AV号全面升级至BV号（专栏）"),a(t)])]),n("li",null,[n("a",y,[s("【升级公告】AV号全面升级至BV号"),a(t)])])]),w,n("p",null,[s("从 2009-09-09 09:09:09 "),n("a",g,[s("av2"),a(t)]),s(" 的发布到 2020-03-28 19:45:02 "),n("a",f,[s("av99999999"),a(t)]),s(" 的发布B站结束了以投稿时间为顺序的avid发放，改为随机发放avid")]),h,x,n("p",null,[n("s",null,[s("算法以及程序主要参考"),n("a",A,[s("知乎@mcfx的回答"),a(t)])]),n("s",null,[s("实际上该算法并不完整,新的算法参考自"),n("a",_,[s("【揭秘】av号转bv号的过程"),a(t)])]),s(" 实际上上面的算法依然不完整，新的算法参考自 "),n("a",B,[s("SocialSisterYi#740"),a(t)]),q]),E,a(l,null,{default:e(()=>[a(c,{title:"JavaScript"},{default:e(()=>[D]),_:1}),a(c,{title:"TypeScript"},{default:e(()=>[S]),_:1})]),_:1}),O,n("p",null,[s("来自："),n("a",C,[s("#847"),a(t)])]),V,n("p",null,[s("参考 "),n("a",I,[s("https://github.com/Colerar/abv/blob/main/src/lib.rs"),a(t)])]),X,n("details",null,[R,n("p",null,[s("算法参考自"),n("a",M,[s("【揭秘】av号转bv号的过程"),a(t)])]),T,n("p",null,[s("感谢"),n("a",L,[s("#417"),a(t)]),s("提供")]),P])])}const H=u(r,[["render",U],["__file","bvid_desc.html.vue"]]);export{H as default};
